forms - use pip install
must use CSRF token for safety (automatically included)

   --> $ pip install flask-wtf

something weird happened to my requirements.txt file (287 lines of code?)
watch video about 

gonna have to go back to video about "refactoring"


make 'forms.py' file
copy code from Flask-WTF documentation:


        from flask_wtf import FlaskForm
        from wtforms import StringField
        from wtforms.validators import DataRequired

        class MyForm(FlaskForm):
            name = StringField('name', validators=[DataRequired()])

need a 'secret key'




<!-- This is the basic BASE TEMPLATE code from jinja documentation -->
<!DOCTYPE html>
<html lang="en">
  <head>
    {% block head %}
    <link rel="stylesheet" href="style.css" />
    <title>{% block title %}{% endblock %} - My Webpage</title>
    {% endblock %}
  </head>
  <body>
    <div id="content">{% block content %}{% endblock %}</div>
    <div id="footer">
      {% block footer %} &copy; Copyright 2008 by
      <a href="http://domain.invalid/">you</a>. {% endblock %}
    </div>
  </body>
</html>




flashing messages:
--> copied from  https://flask.palletsprojects.com/en/2.1.x/patterns/flashing/
Brian used a bootstrap code block to format

**to connect to database:
--> pip install flask-sqlalchemy
then do another pip freeze > requirements.txt<-- to update necessary packages


from werkzeug.security import generate_password_hash, check_password_hash

why we can't just do a def __init__(self) for class(User)
from SQLAlchemy Quickstart-->
      Note how we never defined a __init__ method on the User class? That’s because SQLAlchemy adds an implicit constructor to all model classes which accepts keyword arguments for all its columns and relationships. If you decide to override the constructor for any reason, make sure to keep accepting **kwargs and call the super constructor with those **kwargs to preserve this behavior:

      class Foo(db.Model):
          # ...
          def __init__(self, **kwargs):
              super(Foo, self).__init__(**kwargs)
              # do custom stuff


instead of db.createall()
use MIGRATE

--> pip install flask-migrate

add to __init__.py
  from flask_migrate import migrate 
  migrate = Migrate(app, db)

**then in terminal:
--> $ flask db init
**creates 'migrations' folder
add to __init__.py
from . import models

--> $ flask db migrate -m "Initial migration"

add to .gitignore:
  app.db


  bc we set unique=True, we need to do a query & if-then to find out if a new user tried to make a username that already exists
  *could use:
    method sqlalchemy.orm.Query.exists()¶
  *or session.query(MyClass).filter(MyClass.name == 'some name')

  filter_by is like 'where' in SQL
  filter is

  ***Day 4 video reference to breakdown @--.route()
  Figure out the structure & linkages to @_.ROUTE():
    >ONE ROUTE for ONE PAGE = each route determines the way a page is set up
    >routes reference other .py docs like forms, models 
    >parameter in the .route() = URL extension for page address!!!
    >function name & parameters ??
    >render_template(<name_of_page.html>)


    1. make a new form (class/object) for PostForm (to set up page layout/format)
    2. send PostForm to routes
